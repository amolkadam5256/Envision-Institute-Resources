Redux: A Complete Guide with Detailed Explanation
Redux is a predictable state management library for JavaScript applications, commonly used with React. It helps manage global state efficiently, making applications easier to debug and test.

🔹 1. What is Redux?
Redux is a state container that manages the application’s state in a single source of truth. It follows the Flux architecture and ensures predictability by allowing only pure functions (reducers) to modify the state.

Why Use Redux?
✅ Centralized State Management – Single source of truth.
✅ Predictable State Updates – Pure functions (reducers) handle state updates.
✅ Easy Debugging – Redux DevTools allows tracking actions and state changes.
✅ Server-Side Rendering (SSR) – Improves performance by rendering on the server.
✅ Great for Large Applications – Helps manage complex UI interactions.

🔹 2. Redux Installation & Setup
Redux requires two main libraries:

redux → Core Redux library.
react-redux → Official bindings for React.
Installation
Using npm:

sh
Copy
Edit
npm install redux react-redux
Using yarn:

sh
Copy
Edit
yarn add redux react-redux
🔹 3. Redux Core Concepts
Redux follows three fundamental principles:

1️⃣ Store – Holds the global state.
2️⃣ Actions – Describe what happens in the app.
3️⃣ Reducers – Pure functions that update the state based on actions.

1️⃣ Store – The Global State Container
The store holds the entire application state. In a Redux app, there is only one store.

Example:

js
Copy
Edit
import { createStore } from "redux";
import counterReducer from "./reducers/counterReducer";

const store = createStore(counterReducer);
export default store;
2️⃣ Actions – Describe What Should Change
Actions are plain JavaScript objects that define what needs to be changed in the state. Each action must have a type property.

Example:

js
Copy
Edit
const increment = { type: "INCREMENT" };
const decrement = { type: "DECREMENT" };
Action Creator:

js
Copy
Edit
const incrementAction = () => {
  return { type: "INCREMENT" };
};
3️⃣ Reducers – Define How State Changes
Reducers are pure functions that take the current state and an action, then return a new state.

Example:

js
Copy
Edit
const counterReducer = (state = { count: 0 }, action) => {
  switch (action.type) {
    case "INCREMENT":
      return { count: state.count + 1 };
    case "DECREMENT":
      return { count: state.count - 1 };
    default:
      return state;
  }
};
🔹 4. Connecting Redux to a React App
Step 1: Provide Store to React
Wrap your App component with Provider from react-redux.

js
Copy
Edit
import React from "react";
import ReactDOM from "react-dom";
import { Provider } from "react-redux";
import store from "./store";
import App from "./App";

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById("root")
);
Step 2: Accessing State with useSelector & Dispatching Actions with useDispatch
React components can access the Redux store using useSelector() and modify it using useDispatch().

js
Copy
Edit
import React from "react";
import { useSelector, useDispatch } from "react-redux";

const Counter = () => {
  const count = useSelector((state) => state.count);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={() => dispatch({ type: "INCREMENT" })}>+</button>
      <button onClick={() => dispatch({ type: "DECREMENT" })}>-</button>
    </div>
  );
};

export default Counter;
🔹 5. Middleware in Redux
Middleware extends Redux functionality. It is commonly used for:

✅ Logging actions
✅ Handling async operations
✅ Error tracking

Redux Thunk – Handling Async Actions
Redux Thunk allows dispatching asynchronous actions.

Installation
sh
Copy
Edit
npm install redux-thunk
Using Middleware
js
Copy
Edit
import { createStore, applyMiddleware } from "redux";
import thunk from "redux-thunk";
import rootReducer from "./reducers";

const store = createStore(rootReducer, applyMiddleware(thunk));
export default store;
Async API Call Example
js
Copy
Edit
const fetchUsers = () => {
  return async (dispatch) => {
    dispatch({ type: "FETCH_USERS_REQUEST" });
    try {
      const response = await fetch("https://jsonplaceholder.typicode.com/users");
      const data = await response.json();
      dispatch({ type: "FETCH_USERS_SUCCESS", payload: data });
    } catch (error) {
      dispatch({ type: "FETCH_USERS_FAILURE", payload: error.message });
    }
  };
};
🔹 6. Redux Toolkit – Simplifying Redux
Redux Toolkit (RTK) simplifies Redux setup and improves performance.

Installation
sh
Copy
Edit
npm install @reduxjs/toolkit react-redux
Create a Slice (State & Reducers Together)
js
Copy
Edit
import { createSlice } from "@reduxjs/toolkit";

const counterSlice = createSlice({
  name: "counter",
  initialState: { count: 0 },
  reducers: {
    increment: (state) => { state.count += 1; },
    decrement: (state) => { state.count -= 1; }
  }
});

export const { increment, decrement } = counterSlice.actions;
export default counterSlice.reducer;
Configure Redux Store
js
Copy
Edit
import { configureStore } from "@reduxjs/toolkit";
import counterReducer from "./counterSlice";

const store = configureStore({
  reducer: { counter: counterReducer }
});

export default store;
🔹 7. Advanced Redux Concepts
1️⃣ Redux Persist – Save State in Local Storage
Persisting Redux state in local storage prevents losing state on page reload.

Installation
sh
Copy
Edit
npm install redux-persist
Setup Persistor
js
Copy
Edit
import { persistStore, persistReducer } from "redux-persist";
import storage from "redux-persist/lib/storage";
import { createStore } from "redux";
import rootReducer from "./reducers";

const persistConfig = {
  key: "root",
  storage,
};

const persistedReducer = persistReducer(persistConfig, rootReducer);
const store = createStore(persistedReducer);
const persistor = persistStore(store);

export { store, persistor };
2️⃣ Redux Saga – Alternative for Async Middleware
Redux Saga handles complex asynchronous tasks in Redux applications.

Installation
sh
Copy
Edit
npm install redux-saga
Setup Redux Saga
js
Copy
Edit
import createSagaMiddleware from "redux-saga";
const sagaMiddleware = createSagaMiddleware();
const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));
sagaMiddleware.run(rootSaga);
🎯 Conclusion
Redux is a powerful state management tool that provides predictable and centralized state management.

✅ Key Takeaways
✔ Core concepts → Store, Actions, Reducers
✔ UseSelector & UseDispatch → Manage state in React
✔ Middleware (Thunk, Saga) → Handle async operations
✔ Redux Toolkit → Simplifies Redux
✔ Redux Persist → Stores state in local storage