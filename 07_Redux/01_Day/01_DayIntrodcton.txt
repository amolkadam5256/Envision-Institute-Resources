====================================
      REDUX: A COMPLETE GUIDE
====================================

📌 What is Redux?
----------------------
Redux is a predictable state management library for JavaScript applications, commonly used with React. It manages global state efficiently and makes debugging easier.

🔹 Why Use Redux?
✅ Centralized State Management – Single source of truth
✅ Predictable State Updates – Pure functions (reducers)
✅ Easy Debugging – Redux DevTools
✅ Server-Side Rendering (SSR)
✅ Great for Large Applications

====================================
      INSTALLATION & SETUP
====================================

🔹 Required Libraries:
- redux → Core Redux library
- react-redux → Official bindings for React

🔹 Install via npm:
npm install redux react-redux

🔹 Install via yarn:
yarn add redux react-redux

====================================
      CORE CONCEPTS
====================================

1️⃣ Store – Holds the global state
2️⃣ Actions – Describe what happens in the app
3️⃣ Reducers – Pure functions that update state

🔹 Store Example:
----------------------
import { createStore } from "redux";
import counterReducer from "./reducers/counterReducer";

const store = createStore(counterReducer);
export default store;

🔹 Actions Example:
----------------------
const increment = { type: "INCREMENT" };
const decrement = { type: "DECREMENT" };

🔹 Action Creator Example:
----------------------
const incrementAction = () => {
  return { type: "INCREMENT" };
};

🔹 Reducer Example:
----------------------
const counterReducer = (state = { count: 0 }, action) => {
  switch (action.type) {
    case "INCREMENT":
      return { count: state.count + 1 };
    case "DECREMENT":
      return { count: state.count - 1 };
    default:
      return state;
  }
};

====================================
  CONNECTING REDUX TO REACT
====================================

🔹 Step 1: Provide Store to React
----------------------
import React from "react";
import ReactDOM from "react-dom";
import { Provider } from "react-redux";
import store from "./store";
import App from "./App";

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById("root")
);

🔹 Step 2: Access State & Dispatch Actions
----------------------
import React from "react";
import { useSelector, useDispatch } from "react-redux";

const Counter = () => {
  const count = useSelector((state) => state.count);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={() => dispatch({ type: "INCREMENT" })}>+</button>
      <button onClick={() => dispatch({ type: "DECREMENT" })}>-</button>
    </div>
  );
};

export default Counter;

====================================
         MIDDLEWARE
====================================

🔹 Common Middleware Uses:
✅ Logging actions
✅ Handling async operations
✅ Error tracking

🔹 Redux Thunk (Async Actions)
----------------------
Install:
npm install redux-thunk

🔹 Applying Middleware:
----------------------
import { createStore, applyMiddleware } from "redux";
import thunk from "redux-thunk";
import rootReducer from "./reducers";

const store = createStore(rootReducer, applyMiddleware(thunk));
export default store;

🔹 Async API Call Example:
----------------------
const fetchUsers = () => {
  return async (dispatch) => {
    dispatch({ type: "FETCH_USERS_REQUEST" });
    try {
      const response = await fetch("https://jsonplaceholder.typicode.com/users");
      const data = await response.json();
      dispatch({ type: "FETCH_USERS_SUCCESS", payload: data });
    } catch (error) {
      dispatch({ type: "FETCH_USERS_FAILURE", payload: error.message });
    }
  };
};

====================================
      REDUX TOOLKIT (RTK)
====================================

🔹 Install:
npm install @reduxjs/toolkit react-redux

🔹 Create a Slice:
----------------------
import { createSlice } from "@reduxjs/toolkit";

const counterSlice = createSlice({
  name: "counter",
  initialState: { count: 0 },
  reducers: {
    increment: (state) => { state.count += 1; },
    decrement: (state) => { state.count -= 1; }
  }
});

export const { increment, decrement } = counterSlice.actions;
export default counterSlice.reducer;

🔹 Configure Redux Store:
----------------------
import { configureStore } from "@reduxjs/toolkit";
import counterReducer from "./counterSlice";

const store = configureStore({
  reducer: { counter: counterReducer }
});

export default store;

====================================
  ADVANCED REDUX CONCEPTS
====================================

1️⃣ Redux Persist – Save State in Local Storage
----------------------------------------
🔹 Install:
npm install redux-persist

🔹 Setup Persistor:
----------------------
import { persistStore, persistReducer } from "redux-persist";
import storage from "redux-persist/lib/storage";
import { createStore } from "redux";
import rootReducer from "./reducers";

const persistConfig = {
  key: "root",
  storage,
};

const persistedReducer = persistReducer(persistConfig, rootReducer);
const store = createStore(persistedReducer);
const persistor = persistStore(store);

export { store, persistor };

2️⃣ Redux Saga – Alternative for Async Middleware
----------------------------------------
🔹 Install:
npm install redux-saga

🔹 Setup Redux Saga:
----------------------
import createSagaMiddleware from "redux-saga";
const sagaMiddleware = createSagaMiddleware();
const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));
sagaMiddleware.run(rootSaga);

====================================
           CONCLUSION
====================================

✅ Core Concepts → Store, Actions, Reducers
✅ useSelector & useDispatch → Manage state in React
✅ Middleware (Thunk, Saga) → Handle async operations
✅ Redux Toolkit → Simplifies Redux
✅ Redux Persist → Stores state in local storage

====================================
        END OF NOTES
====================================

a fuction thats accepts as inital state an bject of reducers function and a slice name and automaticly grnarets action creaters and action tat correspond to he reducers and state 